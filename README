User interface for dynamical simulations, with a Lennard-Jones example.

Copyright 2021 by Radford M. Neal, released under GPL version 3 (see COPYING).


This software implements a framework for interacting with dynamical
simulations in two dimensions. A two-dimensional system of molecules
interacting via a modified Lennard-Jones potential is implemented as
an example.

The software is written in C, using the SFML library (with the CSFML
bindings), as described at sfml-dev.org.  The SFML and CSFML libraries
must be installed, after which "make" should compile the programs.  On
macOS with Homebrew, "brew install SFML" and "brew install CSFML" may
be used to install SFML and CSFML.  On Ubuntu Linux, they may be
installed with "sudo apt-get install libsfml-dev" and "suod apt-get
install libcsfml-dev".

The dynui.c and dynui.h files define the framework for a user
interface to a dynamical simulation program, with the state of the
simulation shown on the window/screen, and with controls at the bottom
that provide the following facilities:

  o Run/pause button to start and stop the simulation.

  o Buttons to set the simulation speed (that turn red if it can't keep up).

  o Buttons to set the scale of the view.

  o Display of simulation time and other simulation-specific information.

  o Save button (downarrow). Turns briefly green if successful, red if not.

  o Full-screen/exit-full-screen button (in lower-right corner).

The viewing port may be moved by dragging with the left mouse button
down. Typing ESC exits full-screen mode, or exits the program if not
in full-screen mode. Typing Control/C exits the program in either
mode.

The circle.c program demonstates this framework for a trivial simulation.

The LJ2D.c program is a more elaborate demonstration, of a 2D system
of molecules interacting via a modified Lennard-Jones potential. This
program implements saving and restoring the simulation state, display
of simulation-specific information, and additional user interactions
of "marking" and "unmarking" of a molecule by right or centre button
mouse clicks on a molecule or on an empty area of the screen. It also
demonstrates some ways of speeding up such a simulation by rapidly
locating molecules that are close enough to interact with a given
molecule.

The LJ2D program is run from the command line by a command of the form

    LJ2D [ @[time] ] [ save-file ] W H N / alpha T [ initial-T ] [ / seed ]

W and H give the width and height of the wrapped-around simulation
area. N gives the number of molecules. The alpha argument, which must
be between 0 and 1, controls the stochastic decay of kinetic energy
towards the value specified by T, with a value of 1 meaning no decay,
and 0 meaning an immediate quench to the specified temperature. The
initial-T argument is the temperature used to initialize the
simulation. The seed parameter sets the random number seed, used for
initialization, and for stochastic temperature updates (if alpha is
not 1).

The optional save-file argument specifies the name of the file that
the state is saved to when the save button is pressed. The default is
"LJsave".

If an @time argument is given, the simulation is run non-interactively
until that total simulation time, and then automatically saved. If
just @ is given as the argument, some information on the simulation
state is printed after initialization, but no simulation is done.

Alternatively, the program may be run with a command of the form

    LJ2D [ @[time] ] save-file

A saved simulation state from a previous run is read from the given
file. If no argument is given before the file, an interactive session
is then started from that state. If an @time argument is given, the
simulation is run non-interactively from the saved state, until the
specified total simulation time (which includes time for the saved
run), and the new state is then saved to save-file automatically. If
just @ is given as the previous argument, some information on the
saved simulation state is printed, but no further simulation is done.

For example, the following command should run a reasonable simulation
(once the run button is pressed):

    LJ2D 200 200 400 / 0.99 0.2 2

There is some documentation on the methods used in the source for
LJ2D.c, and several options are settable there. The merge-sort.c and
quick-sort.c files provide sorting facilities that may be used by
LJ2D.c.

The Lennard-Jones program may be of some interest in itself, but is
meant mostly as a demonstration of the framework - better software is
likely available for those actually interested in Lennard-Jones
systems. My motiviation for creating the dynui framework is its future
use for a different project.
